根据现有的策略，AI给出的一些优化建议：

# 增加交易信号生成的策略建议

根据您的策略和现有代码，以下是几种增加交易机会的方法：

## 1. 信号生成逻辑优化

```python
# 当前信号条件可能过于严格，可以考虑以下修改：
@njit
def calculate_scores_nb(
    # 参数保持不变
):
    # ... 现有代码 ...
    
    for i in range(1, n):
        # 可以添加趋势反转信号判断
        rsi_reversal_up = rsi[i] > rsi[i-1] and rsi[i-1] <= rsi_low_thresh[i-1]  # RSI从低位反弹
        rsi_reversal_down = rsi[i] < rsi[i-1] and rsi[i-1] >= rsi_high_thresh[i-1]  # RSI从高位回落
        
        # 价格突破均线信号
        price_cross_above_sma = close[i] > sma_short[i] and close[i-1] <= sma_short[i-1]
        price_cross_below_sma = close[i] < sma_short[i] and close[i-1] >= sma_short[i-1]
        
        # 添加这些额外分数到现有评分中
        if rsi_reversal_up:
            bullish_scores[i] += 0.15  # 额外加分
            
        if rsi_reversal_down:
            bearish_scores[i] += 0.15  # 额外加分
            
        if price_cross_above_sma:
            bullish_scores[i] += 0.1
            
        if price_cross_below_sma:
            bearish_scores[i] += 0.1
```

## 2. 多种信号触发方式

```python
def generate_signals(indicator_df: pd.DataFrame, params: dict) -> tuple[pd.Series, pd.Series]:
    # ... 现有代码 ...
    
    # 主要评分信号
    score_entries = (indicator_df['bullish_score'] >= params['bullish_threshold'])
    score_exits = (indicator_df['bearish_score'] >= params['bearish_threshold'])
    
    # 添加额外信号 - MACD交叉
    macd_entries = (indicator_df['macd_line'] > indicator_df['macd_signal']) & (indicator_df['macd_line'].shift(1) <= indicator_df['macd_signal'].shift(1))
    macd_exits = (indicator_df['macd_line'] < indicator_df['macd_signal']) & (indicator_df['macd_line'].shift(1) >= indicator_df['macd_signal'].shift(1))
    
    # 添加额外信号 - 均线交叉
    sma_entries = (indicator_df['close'] > indicator_df['sma_short']) & (indicator_df['close'].shift(1) <= indicator_df['sma_short'].shift(1))
    sma_exits = (indicator_df['close'] < indicator_df['sma_short']) & (indicator_df['close'].shift(1) >= indicator_df['sma_short'].shift(1))
    
    # 组合信号 - 任何一个信号都可以触发交易
    long_entries = score_entries | macd_entries | sma_entries
    long_exits = score_exits | macd_exits | sma_exits
    
    return long_entries, long_exits
```

## 3. 快速反应型信号

```python
def calculate_indicators(data: pd.DataFrame, params: dict) -> pd.DataFrame:
    # ... 现有代码 ...
    
    # 添加快速反应型指标
    df['ema_fast'] = ta.ema(df['close'], length=5)  # 5日EMA
    df['ema_medium'] = ta.ema(df['close'], length=13)  # 13日EMA
    
    # 添加ATR用于波动率信号
    atr = ta.atr(df['high'], df['low'], df['close'], length=14)
    df['atr'] = atr
    df['atr_pct'] = df['atr'] / df['close'] * 100  # ATR百分比
    
    # 添加价格动量
    df['momentum'] = df['close'] / df['close'].shift(5) - 1  # 5日动量
    
    # 添加波动率突破信号
    df['vol_breakout'] = df['close'].rolling(5).std() > df['close'].rolling(20).std() * 1.5
    
    return df
```

## 4. 价格行为模式识别

```python
@njit
def add_price_pattern_signals(
    close: np.ndarray,
    high: np.ndarray,
    low: np.ndarray,
    bullish_scores: np.ndarray,
    bearish_scores: np.ndarray
) -> tuple[np.ndarray, np.ndarray]:
    for i in range(3, len(close)):
        # 锤子线形态 (看涨)
        if (high[i] - low[i] > (close[i] - low[i]) * 2.5) and (close[i] > open[i]) and ((close[i] - low[i]) / (high[i] - low[i]) > 0.6):
            bullish_scores[i] += 0.2
            
        # 吊颈线形态 (看跌)
        if (high[i] - low[i] > (high[i] - close[i]) * 2.5) and (close[i] < open[i]) and ((high[i] - close[i]) / (high[i] - low[i]) > 0.6):
            bearish_scores[i] += 0.2
            
    return bullish_scores, bearish_scores
```

## 5. 调整参数空间

降低信号阈值的下限，使系统更容易生成交易信号：

```python
'bullish_threshold': trial.suggest_float('bullish_threshold', 0.15, 0.5, step=0.05),  # 下限从0.2降至0.15
'bearish_threshold': trial.suggest_float('bearish_threshold', 0.15, 0.5, step=0.05),  # 下限从0.2降至0.15
```

## 6. 交易频率调整策略

针对特斯拉的季度反应特性，可以增加短期交易的权重：

```python
# 在特定日期附近(财报日)提高信号敏感度
earnings_dates = ['2024-01-24', '2024-04-23', '2024-07-23', '2024-10-22']  # 假设的财报日期
earnings_dates = pd.to_datetime(earnings_dates)

# 在财报前后10天内调整信号敏感度
for date in earnings_dates:
    earnings_window = pd.date_range(date - pd.Timedelta(days=10), date + pd.Timedelta(days=10))
    # 在这些日期范围内降低信号阈值
    indicator_df.loc[indicator_df.index.isin(earnings_window), 'bullish_threshold'] = indicator_df.loc[indicator_df.index.isin(earnings_window), 'bullish_threshold'] * 0.8
    indicator_df.loc[indicator_df.index.isin(earnings_window), 'bearish_threshold'] = indicator_df.loc[indicator_df.index.isin(earnings_window), 'bearish_threshold'] * 0.8
```

## 实现建议

1. 从添加简单的交叉信号开始，这些信号更容易触发
2. 结合多种信号类型，而不是只依赖于评分系统
3. 引入不同时间周期的信号（比如日线+周线）
4. 考虑财报季节性因素，在关键时期调整信号敏感度
5. 平衡增加交易次数与维持高胜率之间的关系

您的优化已将N_TRIALS增加到1000次，这将提供更全面的参数搜索，同时将PYRAMIDING改为1避免了过度加仓风险。这些修改与上述信号优化相结合，应该能产生更多高质量的交易机会。

是否需要我详细展开上述任何一种方法的具体实现代码？
